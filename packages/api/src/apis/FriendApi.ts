/* tslint:disable */
/* eslint-disable */
/**
 * Chat API
 * API for southball/next-chat.
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AddFriendRequest {
    userGuid: string;
}

export interface DeleteFriendRequest {
    userGuid: string;
}

/**
 * 
 */
export class FriendApi extends runtime.BaseAPI {

    /**
     * Add user to list of friends.
     */
    async addFriendRaw(requestParameters: AddFriendRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userGuid === null || requestParameters.userGuid === undefined) {
            throw new runtime.RequiredError('userGuid','Required parameter requestParameters.userGuid was null or undefined when calling addFriend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/friend/{user_guid}`.replace(`{${"user_guid"}}`, encodeURIComponent(String(requestParameters.userGuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add user to list of friends.
     */
    async addFriend(requestParameters: AddFriendRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addFriendRaw(requestParameters, initOverrides);
    }

    /**
     * Remove user from list of friends.
     */
    async deleteFriendRaw(requestParameters: DeleteFriendRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userGuid === null || requestParameters.userGuid === undefined) {
            throw new runtime.RequiredError('userGuid','Required parameter requestParameters.userGuid was null or undefined when calling deleteFriend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/friend/{user_guid}`.replace(`{${"user_guid"}}`, encodeURIComponent(String(requestParameters.userGuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove user from list of friends.
     */
    async deleteFriend(requestParameters: DeleteFriendRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteFriendRaw(requestParameters, initOverrides);
    }

    /**
     * Get the list of friends.
     */
    async getFriendsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/friends`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Get the list of friends.
     */
    async getFriends(initOverrides?: RequestInit): Promise<Array<User>> {
        const response = await this.getFriendsRaw(initOverrides);
        return await response.value();
    }

}
